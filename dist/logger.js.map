{"version":3,"sources":["../src/logger.js"],"names":["Levels","Logger","name","appender","undefined","_appender","_level","WARN","_initLogger","trace","isTrace","bind","binding","_prefix","_noop","debug","isDebug","info","isInfo","warn","isWarn","error","isError","Error","_name","trim","length","level","NONE","ERROR","ALL","TRACE","DEBUG","INFO","logger"],"mappings":"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","file":"logger.js","sourcesContent":["/**\n * Project: LekkerApps - Logging\n * Copyright 2016 Ashley G Ramdass <agramdass@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport ConsoleAppender from './console-appender';\n\nexport const Levels = {\n  'NONE': 0,\n  'ALL': 1,\n  'TRACE': 2,\n  'DEBUG': 3,\n  'INFO': 4,\n  'WARN': 5,\n  'ERROR': 6\n};\n\nexport class Logger {\n  constructor(name, appender) {\n    if (name === undefined) {\n      name = 'DEFAULT';\n    }\n\n    if (!appender) {\n      // No appender, default to Console Appender\n      this._appender = ConsoleAppender;\n    } else {\n      this._appender = appender;\n    }\n\n    this.name = name;\n    this._level = Levels.WARN;\n    this._initLogger();\n  }\n\n  _initLogger() {\n    // this.fine = this.isFine() ? window.console.log.bind(window.console, '%c%s', 'color: #757575; font-size: 10px;') : this._noop;\n    this.trace = this.isTrace ? this._appender.trace.bind(this._appender.binding, this._prefix) : this._noop;\n    this.debug = this.isDebug ? this._appender.debug.bind(this._appender.binding, this._prefix) : this._noop;\n    this.info = this.isInfo ? this._appender.info.bind(this._appender.binding, this._prefix) : this._noop;\n    this.warn = this.isWarn ? this._appender.warn.bind(this._appender.binding, this._prefix) : this._noop;\n    this.error = this.isError ? this._appender.error.bind(this._appender.binding, this._prefix) : this._noop;\n  }\n\n  _noop() { }\n\n  set name(name) {\n    if (name === undefined || name === null) {\n      throw new Error('Name required!!!');\n    }\n    this._name = name;\n    this._prefix = this._name.trim().length == 0 ? '' : `[${this._name}]`;\n    this._initLogger();\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set appender(appender) {\n    if (!appender) {\n      throw new Error('Appender required!!!');\n    }\n    this._appender = appender;\n    this._initLogger();\n  }\n\n  /**\n   * Set the current logging level\n   *\n   * @param {Levels.value} level - The level to set for logging\n   */\n  set level(level) {\n    if (level >= Levels.NONE && level <= Levels.ERROR) {\n      this._level = level;\n      this._initLogger();\n    } else {\n      throw new Error('Invalid level: ' + level);\n    }\n  }\n\n  /**\n   * Retrieves the current logging level\n   *\n   * @return Logging level\n   */\n  get level() {\n    return this._level;\n  }\n\n  /**\n   * Retrieves whether the current logging level is NONE\n   *\n   * @readonly\n   * @return true if the current logging level is Levels.NONE, false otherwise\n   */\n  get isNone() {\n    return this._level === Levels.NONE;\n  }\n\n  /**\n   * Retrieves whether the current logging level is ALL\n   *\n   * @readonly\n   * @return true if the current logging level is Levels.ALL, false otherwise\n   */\n  get isAll() {\n    return this._level === Levels.ALL;\n  }\n\n  /**\n   * Retrieves whether the current logging level is TRACE\n   *\n   * @readonly\n   * @return true if the current logging level is Levels.TRACE, false otherwise\n   */\n  get isTrace() {\n    return this._level > 0 && this._level <= Levels.TRACE;\n  }\n\n  /**\n   * Retrieves whether the current logging level is TRACE\n   *\n   * @readonly\n   * @return true if the current logging level is Levels.TRACE, false otherwise\n   */\n  get isDebug() {\n    return this._level > 0 && this._level <= Levels.DEBUG;\n  }\n\n  /**\n   * Retrieves whether the current logging level is INFO\n   *\n   * @readonly\n   * @return true if the current logging level is Levels.INFO, false otherwise\n   */\n  get isInfo() {\n    return this._level > 0 && this._level <= Levels.INFO;\n  }\n\n  /**\n   * Retrieves whether the current logging level is WARN\n   *\n   * @readonly\n   * @return true if the current logging level is Levels.WARN, false otherwise\n   */\n  get isWarn() {\n    return this._level > 0 && this._level <= Levels.WARN;\n  }\n\n  /**\n   * Retrieves whether the current logging level is ERROR\n   *\n   * @readonly\n   * @return true if the current logging level is Levels.ERROR, false otherwise\n   */\n  get isError() {\n    return this._level > 0 && this._level <= Levels.ERROR;\n  }\n}\n\nlet logger = new Logger('');\nexport default logger;\n"]}